{"version":3,"sources":["components/forms/PatientForm.js","components/forms/QueryForm.js","components/forms/ReviewForm.js","components/DemographicTable.js","components/accordions/PatientInfoAccordion.js","components/cards/ReviewCards.js","components/cards/QueryCards.js","components/Tabs.js","App.js","serviceWorker.js","index.js"],"names":["PatientForm","state","account_number","medical_rec_number","admit_date","length_of_stay","financial_class","status","patient_name","age","date_of_birth","nursing_unit","room","date_in","date_out","handleInputs","evnt","target","name","value","setState","handleSubmit","preventDefault","props","addNewPatient","Form","onSubmit","this","style","margin","color","Group","widths","Input","fluid","label","type","placeholder","onChange","Component","QueryForm","doctor_name","doctor_question","clinical_indicators","history_and_physical","treatment","created_on","addNewQuery","ReviewForm","ed","vital_signs","diagnostics","medication_administration_record","query_opportunities","labs","past_medical_history","addNewReview","tableRow","patient","Table","Row","Cell","demographic","selectable","href","employeePatients","employee","patients","map","DemographicTable","celled","Header","HeaderCell","Body","currentEmployee","PatientInfoAccordion","activeIndex","undefined","handleClick","e","titleProps","index","newIndex","Accordion","styled","Title","active","onClick","Icon","Content","info","roomInfo","demographics","card","review","Card","marginRight","marginLeft","Meta","Description","listStyleType","ReviewCards","reviews","query","queries","panes","menuItem","key","icon","content","render","Tab","Pane","Modal","trigger","Button","className","size","position","overflow","pform","chart","patientaccordion","employeename","rform","patientname","reviewcards","qform","querycards","Tabs","roomform","getEmployeeName","getPatientInfo","getPatientDemographics","getPatientRoomInfo","datein","employeeUsername","id","username","patientNameOption","defaultOptions","loop","autoplay","animationData","legoData","rendererSettings","preserveAspectRatio","docs","1","password","email","2","getPatientsFromServer","fetch","then","res","json","getAllFromServer","employees","rooms","reduce","i","length","j","filter","obj","sendPatientReviewToDb","reviewData","method","headers","body","JSON","stringify","sendPatientQueryToDb","queryData","sendPatientInfoToDb","patientData","sendPatientDemographicToDb","demographicData","sendPatientRoomToDb","roomData","App","currentPatient","done","componentDidMount","console","log","setTimeout","getAllEmployees","Object","values","getAllEmployeePatients","getCurrentPatient","setCurrentEmployee","setCurrentPatientIndex","findIndex","getCurrentEmployee","patientInfo","nextPatientId","newPatientInfo","newDemographic","newRoom","push","newQuery","newReview","authenicate","credentials","getState","class","options","height","width","React","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92547a4c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Form } from 'semantic-ui-react'\n\nexport default class PatientForm extends Component {\n    state = {\n        // patient\n        account_number: '',\n        medical_rec_number: '',\n        admit_date: '2020-01-01',\n        length_of_stay: 0,\n        financial_class: '',\n        status: '',\n        // demographic\n        patient_name: '',\n        age: 0,\n        date_of_birth: '2020-01-01',\n        // room\n        nursing_unit: '',\n        room: '',\n        date_in: '2020-01-01',\n        date_out: '2020-01-01'\n    }\n    handleInputs = (evnt) => {\n        let state = { ...this.state }\n\n        state[evnt.target.name] = evnt.target.value\n\n        this.setState(state)\n    }\n    handleSubmit = (evnt) => {\n        evnt.preventDefault()\n\n        this.props.addNewPatient(this.state)\n    }\n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit} style={{margin: '40px', color: 'white'}}>\n                <Form.Group widths='equal'>\n                    <Form.Input fluid label='Accont Number' type='text' name='account_number' placeholder='Enter Account #' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Medical Record #' type='text' name='medical_rec_number' placeholder='Enter Medical Record #' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Admit Date' type='date' name='admit_date' placeholder='When Admitted?' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Length of Stay' type='number' name='length_of_stay' placeholder='How Long was the stay?' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Financial Class' type='text' name='financial_class' placeholder='Medicaid, Medicare, etc.' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Status' type='text' name='status' placeholder='Admitted or Discharged' onChange={this.handleInputs} />\n                </Form.Group>\n                <Form.Group widths='equal'>\n                    <Form.Input fluid label='Patient Name' type='text' name='patient_name' placeholder='Last, First I' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Age' type='number' name='age' placeholder='Current Age' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Date Of Birth' type='date' name='date_of_birth' onChange={this.handleInputs} />\n                </Form.Group>\n                <Form.Group widths='equal'>\n                    <Form.Input fluid label='Nursing Unit' type='text' name='nursing_unit' placeholder='T5-S' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Room' type='text' name='room' placeholder='T509-01' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Date In' type='date' name='date_in' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Date Out' type='date' name='date_out' onChange={this.handleInputs} />\n                </Form.Group>\n                <Form.Group>\n                    <input type='submit' value='Add' />\n                </Form.Group>\n            </Form>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Form } from 'semantic-ui-react'\n\nexport default class QueryForm extends Component {\n    state = {\n        doctor_name: '',\n        doctor_question: '',\n        clinical_indicators: '',\n        history_and_physical: '',\n        treatment: '',\n        status: '',\n        created_on: ''\n    }\n\n    handleInputs = (evnt) => {\n        let state = {...this.state}\n\n        state[evnt.target.name] = evnt.target.value\n\n        this.setState(state)\n    }\n\n    handleSubmit = (evnt) => {\n        evnt.preventDefault()\n\n        this.props.addNewQuery(this.state)\n    }\n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Group widths='equal'>\n                    <Form.Input fluid label='Doctor Name' type='text' name='doctor_name' placeholder='Doe, John D., NP' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Doctor Question' type='text' name='doctor_question' placeholder=\"1,000 Words Max\" onChange={this.handleInputs} />\n                </Form.Group>\n                <Form.Group widths='equal'>\n                    <Form.Input fluid label='Clinical Indicators' type='text' name='clinical_indicators' placeholder='1,000 Words Max' onChange={this.handleInputs} />\n                    <Form.Input fluid label='H&P' type='text' name='history_and_physical' placeholder='1,000 Words Max' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Treatment' type='text' name='treatment' placeholder='1,000 Words Max' onChange={this.handleInputs} />\n                </Form.Group>\n                <Form.Group widths='equal'>\n                    <Form.Input fluid label='Status' type='text' name='status' placeholder='Open or Closed' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Date' type='date' name='created_on' placeholder=\"Today's Date\" onChange={this.handleInputs} />\n                </Form.Group>\n                <Form.Group>\n                    <input type='submit' value='Add' />\n                </Form.Group>\n            </Form>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Form } from 'semantic-ui-react'\n\n\nexport default class ReviewForm extends Component {\n    state = {\n        ed: '',\n        vital_signs: '',\n        diagnostics: '',\n        medication_administration_record: '',\n        history_and_physical: '',\n        query_opportunities: '',\n        labs: '',\n        type: '',\n        past_medical_history: '',\n        created_on: ''\n\n    }\n\n    handleInputs = (evnt) => {\n        let state = { ...this.state }\n\n        state[evnt.target.name] = evnt.target.value\n\n        this.setState(state)\n    }\n    handleSubmit = (evnt) => {\n        evnt.preventDefault()\n\n        this.props.addNewReview(this.state)\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Group widths='equal'>\n                    <Form.Input fluid label='Ed' type='text' name='ed' placeholder='500 Words Max' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Vital Signs' type='text' name='vital_signs' placeholder='500 Words Max' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Diagnostics' type='text' name='diagnostics' placeholder='500 Words Max' onChange={this.handleInputs} />\n                </Form.Group>\n                <Form.Group widths='equal'>\n                    <Form.Input fluid label='Mar' type='text' name='medication_administration_record' placeholder='500 Words Max' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Past Medical History' type='text' name='past_medical_history' placeholder='500 Words Max' onChange={this.handleInputs} />\n                    <Form.Input fluid label='H&P' type='text' name='history_and_physical' placeholder='500 Words Max' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Query Opportunites' type='text' name='query_opportunities' placeholder='500 Words Max' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Labs' type='text' name='labs' placeholder='500 Words Max' onChange={this.handleInputs} />\n                </Form.Group>\n                <Form.Group widths='equal'>\n                    <Form.Input fluid label='Type' type='text' name='type' placeholder='Review or Re-Review' onChange={this.handleInputs} />\n                    <Form.Input fluid label='Date' type='date' name='created_on' placeholder=\"Today's Date\" onChange={this.handleInputs} />\n                </Form.Group>\n                <Form.Group widths='equal'>\n                    <input type='submit' value='Add' />\n                </Form.Group>\n            </Form>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Table } from 'semantic-ui-react'\n\nconst tableRow = (patient) => (\n    <Table.Row>\n        <Table.Cell>{patient.medical_rec_number}</Table.Cell>\n        <Table.Cell>{patient.admit_date}</Table.Cell>\n        <Table.Cell>{patient.financial_class}</Table.Cell>\n        <Table.Cell>{patient.demographic.patient_name || \"Loading...\"}</Table.Cell>\n        <Table.Cell>{patient.demographic.age || \"Loading...\"}</Table.Cell>\n        <Table.Cell>{patient.demographic.date_of_birth || \"Loading...\"}</Table.Cell>\n        <Table.Cell>{patient.status}</Table.Cell>\n        <Table.Cell selectable><a href='#'>Select</a></Table.Cell>\n    </Table.Row>\n)\n\nconst patientList = (patients) => (\n    patients.map(tableRow)\n)\n\nconst employeePatients = (employee) => (\n    patientList(employee.patients)\n)\n\nexport default class DemographicTable extends Component {\n    render() {\n        return (\n            <div>\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Medical Record #</Table.HeaderCell>\n                            <Table.HeaderCell>Admit Date</Table.HeaderCell>\n                            <Table.HeaderCell>Financial Class</Table.HeaderCell>\n                            <Table.HeaderCell>Name</Table.HeaderCell>\n                            <Table.HeaderCell>Age</Table.HeaderCell>\n                            {/* vvvvv Change for number of open Queries vvvv */}\n                            <Table.HeaderCell>DOB</Table.HeaderCell>\n                            <Table.HeaderCell>Status</Table.HeaderCell>\n                            <Table.HeaderCell>View</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {employeePatients(this.props.currentEmployee)}\n                    </Table.Body>\n                </Table>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Accordion, Icon } from 'semantic-ui-react'\n\n\nexport default class PatientInfoAccordion extends Component {\n  state = {\n    activeIndex: undefined\n  }\n  handleClick = (e, titleProps) => {\n    const { index } = titleProps\n    const { activeIndex } = this.state\n    const newIndex = activeIndex === index ? -1 : index\n    this.setState({ activeIndex: newIndex })\n  }\n\n  render() {\n    const { activeIndex } = this.state\n\n    return (\n      <div>\n        <Accordion fluid styled>\n          <Accordion.Title\n            active={activeIndex === 0}\n            index={0}\n            onClick={this.handleClick}\n          >\n            <Icon name='dropdown' />\n            Patient Info\n        </Accordion.Title>\n          <Accordion.Content active={activeIndex === 0}>\n            {this.props.info}\n          </Accordion.Content>\n\n          <Accordion.Title\n            active={activeIndex === 1}\n            index={1}\n            onClick={this.handleClick}\n          >\n            <Icon name='dropdown' />\n            Room Info\n        </Accordion.Title>\n          <Accordion.Content active={activeIndex === 1}>\n            {this.props.roomInfo}\n          </Accordion.Content>\n\n          <Accordion.Title\n            active={activeIndex === 2}\n            index={2}\n            onClick={this.handleClick}\n          >\n            <Icon name='dropdown' />\n            Demographics\n        </Accordion.Title>\n          <Accordion.Content active={activeIndex === 2}>\n            {this.props.demographics}\n          </Accordion.Content>\n        </Accordion>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Card } from 'semantic-ui-react'\n\nconst card = (review) => (\n    <Card>\n        <Card.Content>\n            <Card.Header>\n                <em style={{ marginRight: '10px' }}>{review.type}</em>\n                |\n                <em style={{ marginLeft: '10px' }}>{review.created_on}</em>\n            </Card.Header>\n            <Card.Meta>{review.type}</Card.Meta>\n            <Card.Description>\n                <ul style={{ listStyleType: 'none' }}>\n                    <li>Ed: {review.ed}</li>\n                    <li>VS: {review.vital_signs}</li>\n                    <li>Diagnostic: {review.diagnostics}</li>\n                    <li>Mar: {review.medication_administration_record}</li>\n                    <li>PMH: {review.past_medical_history}</li>\n                    <li>H&P: {review.history_and_physical}</li>\n                    <li>Query Opportunites: {review.query_opportunities}</li>\n                    <li>Labs: {review.labs}</li>\n                </ul>\n            </Card.Description>\n        </Card.Content>\n    </Card>\n)\n\nconst cardList = (list) => (\n    list.map(card)\n)\n\nexport default class ReviewCards extends Component {\n    render() {\n        return (\n            <div>\n                <Card.Group>\n                    {cardList(this.props.reviews)}\n                </Card.Group>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Card } from 'semantic-ui-react'\n\nconst card = (query) => (\n    <Card>\n        <Card.Content>\n            <Card.Header>\n                <em style={{ marginRight: '10px' }}>Query</em>\n                |\n                <em style={{ marginLeft: '10px' }}>{query.created_on}</em>\n            </Card.Header>\n            <Card.Meta>Status: {query.status}</Card.Meta>\n            <Card.Description>\n                <ul style={{ listStyleType: 'none' }}>\n                    <li>Doctor Name: {query.doctor_name}</li>\n                    <li>Doctor Question: {query.doctor_question}</li>\n                    <li>Clinical Indicators: {query.clinical_indicators}</li>\n                    <li>H&P: {query.history_and_physical}</li>\n                    <li>Tx: {query.treatment}</li>\n                </ul>\n            </Card.Description>\n        </Card.Content>\n    </Card>\n)\n\nconst cardList = (list) => (\n    list.map(card)\n)\n\nexport default class ReviewCards extends Component {\n    render() {\n        return (\n            <div>\n                <Card.Group>\n                    {cardList(this.props.queries)}\n                </Card.Group>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Tab, Modal, Button } from 'semantic-ui-react'\nimport DemographicTable from './DemographicTable'\nimport PatientInfoAccordion from './accordions/PatientInfoAccordion'\nimport ReviewCards from './cards/ReviewCards'\nimport QueryCard from './cards/QueryCards'\n\nconst panes = [\n    {\n        menuItem: { key: 'patients', icon: 'users', content: 'Patients' },\n        render: (props) => (\n            <Tab.Pane>\n                <Modal trigger={<Button className=\"add-patient-button\">Add New Patient</Button>} size='large' style={{position: 'relative', overflow: 'scroll'}}>\n                    <Modal.Header>Enter New Patient Info</Modal.Header>\n                <Modal.Content>\n                <Modal.Description>\n                <h2>Patient Info</h2>\n                {props.pform}\n                </Modal.Description>\n                </Modal.Content>\n                </Modal>\n                {props.chart}\n            </Tab.Pane>\n        )\n    },\n    {\n        menuItem: { key: 'patient', icon: 'address card', content: 'Patient' },\n        render: (props) => (\n            <Tab.Pane>\n                <h1>Patient's Info</h1>\n                {props.patientaccordion}\n            </Tab.Pane>\n        )\n    },\n    {\n        menuItem: { key: 'reviews', icon: 'stethoscope', content: 'Reviews' },\n        render: (props) => (\n            <Tab.Pane>\n                {props.employeename}\n                {props.rform}\n                <h2>Patient Name: {props.patientname}</h2>\n                {props.reviewcards}\n            </Tab.Pane>\n        )\n    },\n    {\n        menuItem: { key: 'queries', icon: 'pills', content: 'Queries' },\n        render: (props) => (\n            <Tab.Pane>\n                {props.employeename}\n                {props.qform}\n                <h2>Patient Name: {props.patientname}</h2>\n                {props.querycards}\n            </Tab.Pane>\n        )\n    }\n]\n\nexport default class Tabs extends Component {\n    render() {\n        return (\n            <div>\n                <Tab\n                    panes={panes}\n                    employeename={this.props.employeename}\n                    pform={this.props.pform}\n                    rform={this.props.rform}\n                    qform={this.props.qform}\n                    roomform={this.props.roomform}\n                    patientname={this.props.patientname}\n                    chart={<DemographicTable currentEmployee={this.props.currentEmployee} />}\n                    reviewcards={<ReviewCards reviews={this.props.reviews} />}\n                    querycards={<QueryCard queries={this.props.queries} />}\n                    patientaccordion={<PatientInfoAccordion\n                        info={this.props.info}\n                        roomInfo={this.props.roomInfo}\n                        demographics={this.props.demographics} />}\n                />\n            </div>\n        )\n    }\n}\n","//Default Imports\nimport React from 'react';\nimport './App.css';\n\n// Form Components\nimport PatientForm from './components/forms/PatientForm'\nimport QueryForm from './components/forms/QueryForm';\nimport ReviewForm from './components/forms/ReviewForm'\n\n// Extra Components\nimport Tabs from './components/Tabs'\n\n// Loading Screen Dependents\nimport FadeIn from \"react-fade-in\";\nimport Lottie from \"react-lottie\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as legoData from \"./legoloading.json\"\n\n\n\n\n// --------- Employee ------------\nconst getEmployeeName = (employee) => (<h4>Employee Name: {employee.name}</h4>)\n\n// ---------- Patient Info * ----------\nconst getPatientInfo = (patient) => (\n  <ul>\n    <li>Account Number: {patient.account_number}</li>\n    <li>Medical Record Number: {patient.medical_rec_number}</li>\n    <li>Admit Date: {patient.admit_date}</li>\n    <li>Length of Stay: {patient.length_of_stay}</li>\n    <li>Financial Class: {patient.financial_class}</li>\n    <li>Status: {patient.status}</li>\n  </ul>\n)\n\nconst listPatientInfo = (patients) => (<div>{patients.map(getPatientInfo)}</div>)\nconst employeePatients = (employee) => (<div>{listPatientInfo(employee.patients)}</div>)\n\n// ----------- Patient Demographics * ---------------\nconst getPatientDemographics = (patient) => (\n  <ul>\n    <li>Name: {patient.demographic.patient_name}</li>\n    <li>Age: {patient.demographic.age}</li>\n    <li>Date of Birth: {patient.demographic.date_of_birth}</li>\n  </ul>\n)\nconst listPatientDemographic = (patients) => (<div>{patients.map(getPatientDemographics)}</div>)\nconst patientsDemographic = (employee) => (<div>{listPatientDemographic(employee.patients)}</div>)\n\n// ----------- Patient Room Info -------------\nconst getPatientRoomInfo = (patient) => (\n  <ul>\n    <li>Nursing Unit: {patient.room.nursing_unit}</li>\n    <li>Room: {patient.room.room}</li>\n    <li>Date In: {patient.room.datein}</li>\n    <li>Date Out: {patient.room.date_out}</li>\n  </ul>\n)\n\n// ------------ Patient Query -------------\nconst getPatientQuery = (query) => (\n  <ul style={{ margin: '15px', border: '2px dotted grey' }}>\n    <li>Doctor Name: {query.doctor_name}</li>\n    <li>Doctor Question: {query.doctor_question}</li>\n    <li>Clinical Indicators: {query.clinical_indicators}</li>\n    <li>H&P: {query.history_and_physical}</li>\n    <li>Tx: {query.treatment}</li>\n  </ul>\n)\nconst queryList = (list) => (<div>{list.map(getPatientQuery)}</div>)\n\n// ---------- Patient Review/Re-reivews ------------\nconst getPatientReview = (review) => (\n  <ul style={{ margin: '15px', border: '2px dotted grey' }}>\n    <li>Ed: {review.ed}</li>\n    <li>VS: {review.vital_signs}</li>\n    <li>Diagnostic: {review.diagnostics}</li>\n    <li>Mar: {review.medication_administration_record}</li>\n    <li>H&P: {review.history_and_physical}</li>\n    <li>Query Opportunites: {review.query_opportunities}</li>\n    <li>Labs: {review.labs}</li>\n    <li>Type: {review.type}</li>\n  </ul>\n)\nconst reviewList = (list) => (<div>{list.map(getPatientReview)}</div>)\n\n//List of Employees\nconst employeeUsername = (employee) => (<option value={employee.id}>{employee.username}</option>)\nconst employeeList = (employees, currentEmployee, onChange) => (\n  <select value={currentEmployee} onChange={(evnt) => onChange(evnt.target.value)}>\n    {employees.map(employeeUsername)}\n  </select>\n)\n\n//List of Cars\nconst patientNameOption = (patient) => (<option value={patient.account_number || \"Loading...\"}>{patient.demographic.patient_name || \"Loading...\"}</option>)\nconst patientList = (patients, currentPatient, onChange) => (\n  <select value={currentPatient} onChange={(evnt) => onChange(evnt.target.value)}>\n    {/* <option value={undefined}>Select Patient</option> */}\n    {patients.map(patientNameOption)}\n  </select>\n)\n\n// Loading Screen Options\nconst defaultOptions = {\n  loop: true,\n  autoplay: true,\n  animationData: legoData.default,\n  rendererSettings: {\n    preserveAspectRatio: \"xMidYMid slice\"\n  }\n}\n\n// ----------- Test Data Structure --------------\nconst docs =\n{\n  1: {\n    id: 1,\n    name: 'Tenia Parrish',\n    username: 'tenia64',\n    password: 'tenia71',\n    email: 'tenia64@msn.com',\n    patients: [\n      {\n        id: 1,\n        account_number: 'EUH6304393485',\n        medical_rec_number: 'EUH694321',\n        admit_date: '2020-16-02',\n        length_of_stay: 3,\n        financial_class: 'Medicare',\n        status: 'Discharged',\n        demographic: {\n          id: 1,\n          patient_name: 'Nelson, Justin D',\n          age: 20,\n          date_of_birth: '2000-10-03'\n        },\n        room: {\n          id: 1,\n          nursing_unit: 'T5-S',\n          room: 'T509-01',\n          date_in: '2020-16-02',\n          date_out: '2020-19-02',\n        },\n        query: [\n          {\n            id: 1,\n            doctor_name: 'Morgan, Phil R., NP',\n            doctor_question: \"Doctor's Question number 1\",\n            clinical_indicators: \"Pt admitted with Hypercapnia Respitory Failure with ALS\",\n            history_and_physical: \"history and physical 1\",\n            treatment: \"3/4/20 Normal Saline 60ml Tube flush given x 6\",\n            status: 'Open',\n            created_on: '2020-19-02'\n          }\n        ],\n        review: [\n          {\n            id: 1,\n            ed: 'ed 1',\n            vital_signs: \"vital signs 1\",\n            diagnostics: \"diagnostics 1\",\n            medication_administration_record: \"medication administration record 1\",\n            past_medical_history: 'past medical history 1',\n            history_and_physical: \"history and physical 1\",\n            query_opportunities: \"query opportunities 1\",\n            labs: \"lab results 1\",\n            type: \"Review\",\n            created_on: '2020-19-02'\n          }\n        ]\n      },\n\n    ]\n  },\n  2: {\n    id: 2,\n    name: 'Justin Parrish',\n    username: 'Justin12',\n    password: 'justin2112',\n    email: 'justin@msn.com',\n    patients: [\n      {\n        id: 1,\n        account_number: 'EUH6304393485',\n        medical_rec_number: 'EUH694321',\n        admit_date: '2020-16-02',\n        length_of_stay: 3,\n        financial_class: 'Medicare',\n        status: 'Discharged',\n        demographic: {\n          id: 1,\n          patient_name: 'Nelson, D',\n          age: 10,\n          date_of_birth: '2010-10-03'\n        },\n        room: {\n          id: 1,\n          nursing_unit: 'T4-S',\n          room: 'T411-01',\n          date_in: '2020-11-02',\n          date_out: '2020-11-02',\n        },\n        query: [\n          {\n            id: 1,\n            doctor_name: 'Morgan, R., NP',\n            doctor_question: \"Doctor's Quen number 1\",\n            clinical_indicators: \"Pt ted with Hypercapnia Respitory Failure with ALS\",\n            history_and_physical: \"ory and physical 1\",\n            treatment: \"3rmal Saline 60ml Tube flush given x 6\",\n            status: 'open',\n            created_on: '2020-19-02'\n            // status: open or closed,\n            // numberOfOpen: Number\n          }\n        ],\n        review: [\n          {\n            id: 1,\n            ed: 'ed 1',\n            vital_signs: \"val signs 1\",\n            diagnostics: \"dgnostic 1\",\n            medication_administration_record: \"medicn administration record 1\",\n            past_medical_history: \"past medical history 1\",\n            history_and_physical: \"his and physical 1\",\n            query_opportunities: \"query opnities 1\",\n            labs: \"lab resu1\",\n            type: \"Review\",\n            created_on: '2020-19-02'\n          }\n        ]\n      }\n    ]\n  }\n}\n\n// -------------- Using Fetch to GET data from Django server ----------------\nconst getEmployeesFromServer = () => (\n  fetch('/api/employee/')\n    .then(res => res.json())\n)\n\nconst getPatientsFromServer = () => (\n  fetch('/api/patient/')\n    .then(res => res.json())\n)\n\nconst getDemographicsFromServer = () => (\n  fetch('/api/demographic/')\n    .then(res => res.json())\n)\n\nconst getRoomsFromServer = () => (\n  fetch('/api/room/')\n    .then(res => res.json())\n)\n\nconst getQueriesFromServer = () => (\n  fetch('/api/query/')\n    .then(res => res.json())\n)\n\nconst getReviewsFromServer = () => (\n  fetch('/api/review/')\n    .then(res => res.json())\n)\n\nconst getAllFromServer = () => (\n  getEmployeesFromServer().then(employees => (\n    getPatientsFromServer().then(patients => (\n      getDemographicsFromServer().then(demographics => (\n        getRoomsFromServer().then(rooms => (\n          getQueriesFromServer().then(queries => (\n            getReviewsFromServer().then(reviews => (\n              patients.reduce((employee, patient) => {\n                for (let i = 0; i < demographics.length; i++) {\n                  if (demographics[i].patient === patient.id) {\n                    patient.demographic = demographics[i]\n                  }\n                }\n                for (let j = 0; j < rooms.length; j++) {\n                  if (rooms[j].patient === patient.id) {\n                    patient.room = rooms[j]\n                  }\n                }\n                patient.query = queries.filter(query => query.patient === patient.id)\n                patient.review = reviews.filter(review => review.patient === patient.id)\n                employee[patient.id] = patient\n                return employee\n              }, {}),\n              employees.reduce((obj, employee) => {\n                employee.patients = patients.filter(patient => patient.employee === employee.id)\n                obj[employee.id] = employee\n                return obj\n              }, {})\n\n            ))\n          ))\n        ))\n      ))\n    ))\n  ))\n)\n// --------- Sending Data to Database with Fetch POST Method ----------\nconst sendPatientReviewToDb = (reviewData) => (\n  fetch('/api/review/',\n  {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(reviewData)\n  }).then(res => res.json())\n)\n\nconst sendPatientQueryToDb = (queryData) => (\n  fetch('/api/query/',\n  {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(queryData)\n  }).then(res => res.json())\n)\n\nconst sendPatientInfoToDb = (patientData) => (\n  fetch('/api/patient/',\n  {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\"},\n    body: JSON.stringify(patientData)\n  }).then(res => res.json())\n)\n\nconst sendPatientDemographicToDb = (demographicData) => (\n  fetch('/api/demographic/', {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\"},\n    body: JSON.stringify(demographicData)\n  }).then(res => res.json())\n)\n\nconst sendPatientRoomToDb = (roomData) => (\n  fetch('/api/room/', {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\"},\n    body: JSON.stringify(roomData)\n  }).then(res => res.json())\n)\n\nclass App extends React.Component {\n  state = {\n    employees: docs,\n    currentEmployee: 1,\n    currentPatient: 0,\n    done: undefined,\n  }\n\n  componentDidMount = () => {\n    getAllFromServer()\n      .then(employees => {\n        console.log(\"object\", employees)\n        this.setState({ employees })\n      }).then(\n        setTimeout(() => {\n          this.setState({ done: true })\n        }, 7000)\n      )\n  }\n\n  getAllEmployees = () => (\n    Object.values(this.state.employees)\n  )\n\n  getAllEmployeePatients = () => (\n    Object.values(this.state.employees[this.state.currentEmployee].patients)\n  )\n\n  getCurrentPatient = () => (\n    this.state.employees[this.state.currentEmployee].patients[this.state.currentPatient]\n  )\n\n  setCurrentEmployee = (currentEmployee) => {\n    this.setState({ currentEmployee, currentPatient: 0 })\n  }\n\n  setCurrentPatientIndex = (currentPatient) => {\n    let patients = this.state.employees[this.state.currentEmployee].patients\n\n    let index = patients.findIndex(patient => patient.account_number === currentPatient)\n\n    console.log(index)\n\n\n    this.setState({ currentPatient: index })\n  }\n\n  getCurrentEmployee = () => (\n    this.state.employees[this.state.currentEmployee]\n  )\n  // ------------------------------------------\n  addNewPatient = (info) => {\n    getPatientsFromServer().then(patients => {\n    sendPatientInfoToDb({...info, employee: this.state.employees[this.state.currentEmployee].id}).then(patientInfo => {\n      sendPatientDemographicToDb({...info, patient: patients[patients.length - 1].id + 1}).then(demographic => {\n        sendPatientRoomToDb({...info, patient: patients[patients.length - 1].id + 1}).then(room => {\n          \n          console.log(\"Patient From App Comp.\", info)\n          \n          let employees = this.state.employees\n          \n          let nextPatientId = patients[patients.length - 1].id + 1\n          console.log(\"patient array length\", nextPatientId)\n\n          let newPatientInfo = {\n            id: nextPatientId,\n            account_number: patientInfo.account_number,\n            medical_rec_number: patientInfo.medical_rec_number,\n            admit_date: patientInfo.admit_date,\n            length_of_stay: patientInfo.length_of_stay,\n            financial_class: patientInfo.financial_class,\n            status: patientInfo.status,\n          }\n          console.log(\"Patient Info part 1\", newPatientInfo)\n          let newDemographic = {\n            patient_name: demographic.patient_name,\n            age: demographic.age,\n            date_of_birth: demographic.date_of_birth,\n          }\n          let newRoom = {\n            nursing_unit: room.nursing_unit,\n            room: room.room,\n            date_in: room.date_in,\n            date_out: room.date_out,\n          }\n          newPatientInfo.demographic = newDemographic\n          newPatientInfo.room = newRoom\n          newPatientInfo.query = []\n          newPatientInfo.review = []\n      \n          employees[this.state.currentEmployee].patients.push(newPatientInfo)\n      \n          this.setState({ employees })\n\n        })\n      })\n    })\n  })\n\n  }\n  // ------------------------------------------\n  addNewQuery = (info) => {\n    sendPatientQueryToDb({...info, patient: this.state.employees[this.state.currentEmployee].patients[this.state.currentPatient].id}).then(info => {\n      let employees = this.state.employees\n  \n      let nextQueryId = employees[this.state.currentEmployee].patients[this.state.currentPatient].query.length + 1\n  \n      let newQuery = {\n        doctor_name: info.doctor_name,\n        doctor_question: info.doctor_question,\n        clinical_indicators: info.clinical_indicators,\n        history_and_physical: info.history_and_physical,\n        treatment: info.treatment,\n        status: info.status,\n        created_on: info.created_on\n      }\n  \n      employees[this.state.currentEmployee].patients[this.state.currentPatient].query.push(newQuery)\n  \n      this.setState({ employees })\n    })\n  }\n  addNewReview = (info) => {\n    sendPatientReviewToDb({...info, patient: this.state.employees[this.state.currentEmployee].patients[this.state.currentPatient].id}).then(info => {\n\n      let employees = this.state.employees\n  \n      let nextQueryId = employees[this.state.currentEmployee].patients[this.state.currentPatient].review.length + 1\n  \n      let newReview = {\n        ed: info.ed,\n        vital_signs: info.vital_signs,\n        diagnostics: info.diagnostics,\n        medication_administration_record: info.medication_administration_record,\n        past_medical_history: info.past_medical_history,\n        history_and_physical: info.history_and_physical,\n        query_opportunities: info.query_opportunities,\n        labs: info.labs,\n        type: info.type,\n        created_on: info.created_on\n      }\n  \n      employees[this.state.currentEmployee].patients[this.state.currentPatient].review.push(newReview)\n  \n      this.setState({ employees })\n    })\n  }\n\n  authenicate = (credentials) => {\n    console.log(credentials)\n    let username = credentials.username\n    let password = credentials.password\n  }\n\n  getState = () => (\n    console.log(\"click for state\", this.state)\n  )\n\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"container\">\n        {!this.state.done ?\n          <div className=\"loading-screen\">\n            <FadeIn>\n              <div class=\"d-flex justify-content-center align-items-center\">\n                <Lottie options={defaultOptions} height={600} width={900} />\n              </div>\n            </FadeIn>\n          </div>\n          :\n          <div className=\"content\">\n            <h1>Documentation Helper</h1>\n            {getEmployeeName(this.getCurrentEmployee())} <br />\n            {employeeList(this.getAllEmployees(), this.state.currentEmployee, this.setCurrentEmployee)}\n            {patientList(this.getAllEmployeePatients(), this.state.currentPatient, this.setCurrentPatientIndex)}\n            <Tabs\n              employeename={getEmployeeName(this.getCurrentEmployee())}\n              currentEmployee={this.getCurrentEmployee()}\n              pform={<PatientForm addNewPatient={this.addNewPatient} />}\n              rform={<ReviewForm addNewReview={this.addNewReview} />}\n              qform={<QueryForm addNewQuery={this.addNewQuery} />}\n              patientInfo={getPatientInfo(this.getCurrentPatient())}\n              demographic={getPatientDemographics(this.getCurrentPatient())}\n              roomInfo={getPatientRoomInfo(this.getCurrentPatient())}\n              reviews={this.state.employees[this.state.currentEmployee].patients[this.state.currentPatient].review}\n              queries={this.state.employees[this.state.currentEmployee].patients[this.state.currentPatient].query}\n              info={getPatientInfo(this.getCurrentPatient())}\n              roomInfo={getPatientRoomInfo(this.getCurrentPatient())}\n              demographics={getPatientDemographics(this.getCurrentPatient())}\n              patientname={this.state.employees[this.state.currentEmployee].patients[this.state.currentPatient].demographic.patient_name || \"Loading...\"}\n            />\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}